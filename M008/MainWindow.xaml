<Window x:Class="M008.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:sys="clr-namespace:System;assembly=System.Runtime"
		xmlns:http="clr-namespace:System.Net;assembly=System.Net"
        xmlns:local="clr-namespace:M008"
		DataContext="{Binding RelativeSource={RelativeSource Self}}"
        Title="MainWindow" Height="450" Width="300"
		WindowStartupLocation="CenterScreen"
		Topmost="True">
    <StackPanel Margin="10">
		<!--MarkupExtension-->
		<!--Alles was zwischen { } steht-->
		<!--Nimmt einen Wert von einer Quelle, und gibt diesen ans XAML weiter-->
		
		<!--Beispiel: Enum an eine ComboBox anbinden-->
		
		<!--Option 1: Liste im Backend erzeugen und diese per Binding anbinden-->
		<ComboBox ItemsSource="{Binding Wochentage}"/>
		<!--Problem: In großen Projekten wird dadurch das Backend mit Enum-Arrays zugemüllt, welche nur zur Anzeige verwendet werden-->
		
		<!--Option 2: Eigene MarkupExtension-->
		<ComboBox ItemsSource="{local:Enum EnumType=sys:DayOfWeek}"/>
		<ComboBox ItemsSource="{local:Enum EnumType=http:HttpStatusCode}"/>
		
		<!--Beispiel: Bereich von X bis Y in einer ComboBox anzeigen-->
		<TextBlock Text="Geburtsjahr auswählen: "/>
		<ComboBox ItemsSource="{local:Range Start=1900, End=2025}"/>
		
		<!--Beispiel: Farben aus der Colors Klasse extrahieren-->
		<ComboBox ItemsSource="{local:Colors}">
			<ComboBox.ItemTemplate>
				<DataTemplate DataType="local:NamedColor">
					<StackPanel Orientation="Horizontal">
						<Rectangle Width="20" Height="20" Stroke="Black" StrokeThickness="2" Fill="{Binding Brush}"/>
						<TextBlock Text="{Binding Name}" Margin="5, 0, 0, 0"/>
						<TextBlock Text="{Binding ColorCode}" Margin="5, 0"/>
					</StackPanel>
				</DataTemplate>
			</ComboBox.ItemTemplate>
		</ComboBox>
		
		<!--Beispiel: Converter per MarkupExtension bereitstellen-->
		<!--Converter: Text zu Zahl übersetzen-->
		<TextBlock Text="{Binding Zahl, Converter={local:Converter ConverterType=local:TextNumberToIntConverter}}"/>
		
		<!--..........................................-->
		
		<!--RelativeSources-->
		<!--Bindungen, bei denen zur Editor-Zeit nicht bekannt ist, was gebunden werden soll-->
		
		<!--Self-->
		<!--Selbstbindung-->
		<Slider Minimum="10" Maximum="100" Name="SizeSlider"/>
		<Rectangle Width="{Binding ElementName=SizeSlider, Path=Value}"
				   Height="{Binding RelativeSource={RelativeSource Self}, Path=Width}"
				   Stroke="Black" StrokeThickness="2" Fill="Aqua"/>
		
		<!--TemplatedParent-->
		<!--Äquivalent zu TemplateBinding-->
		<Button Content="Hallo" FontWeight="Bold" FontSize="20" BorderBrush="Black" BorderThickness="3">
			<Button.Template>
				<ControlTemplate TargetType="Button">
					<Border BorderBrush="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Background="Aqua"
							CornerRadius="20">
						<ContentPresenter Margin="3"
								  HorizontalAlignment="Center"
								  VerticalAlignment="Center"/>
					</Border>
				</ControlTemplate>
			</Button.Template>
		</Button>
		
		<!--FindAncestor-->
		<!--Sucht zur Laufzeit einen Typen mit einem Level-->
		<Grid Background="Aqua" Height="100">
			<Grid Background="Orange" Height="75">
				<Grid Background="LightGreen" Height="50">
					<Button Height="25"
							Background="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}, AncestorLevel=1}, Path=Background}"/>
				</Grid>
			</Grid>
		</Grid>
		
		<!--PreviousData-->
		<!--Greift in einer Listenkomponente auf das vorherige Element zu-->
		<ListBox ItemsSource="{local:Range Start=0, End=20}">
			<ListBox.ItemTemplate>
				<DataTemplate DataType="sys:Int32">
					<StackPanel Orientation="Horizontal">
						<TextBlock Text="{Binding .}" Margin="10, 0"/>
						<TextBlock Text="{Binding RelativeSource={RelativeSource PreviousData}}"/>
					</StackPanel>
				</DataTemplate>
			</ListBox.ItemTemplate>
		</ListBox>
	</StackPanel>
</Window>
