<Window x:Class="M013.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:local="clr-namespace:M013"
		DataContext="{Binding RelativeSource={RelativeSource Self}}"
        Title="MainWindow" Height="450" Width="800"
		WindowStartupLocation="CenterScreen"
		Topmost="True">
	<Window.Resources>
		<BooleanToVisibilityConverter x:Key="BVC"/>
	</Window.Resources>
    <StackPanel>
		<!--Commands-->
		<!--Kapselung der Methodenlogik von Eventmethoden-->
		<!--Normalerweise, wird die Logik von einem Event (z.B. Click-Event) in einer Methode abgelegt, die per Event angebunden ist-->
		<!--Dies ist per MVVM nicht möglich, da eine starke Koppelung zw. Backend und Frontend stattfindet-->
		<Button Click="Button_Click"/>
		
		<!--In MVVM werden statt Events Commands verwendet, die per Binding angehängt werden-->
		<!--Commands benötigen eine eigene Klasse vom Typ ICommand-->
		<Button Command="{Binding Exit}" Content="Command Button" Name="CB"/>
		<TextBlock Visibility="{Binding ElementName=CB, Path=IsEnabled, Converter={StaticResource BVC}}"
				   Text="Hallo Welt" FontSize="40"/>
		
		<!--Commands können auch Daten empfangen (über CommandParameter)-->
		<TextBox Name="Eingabe"/>
		<Button Command="{Binding WriteFileCustom}"
				CommandParameter="{Binding ElementName=Eingabe, Path=Text, UpdateSourceTrigger=PropertyChanged}"
				Content="Datei schreiben"/>

		<!--An beliebige Events ein Command anhängen-->
		<TextBox Name="Input">
			<b:Interaction.Triggers>
				<b:EventTrigger EventName="KeyDown">
					<b:InvokeCommandAction Command="{Binding WriteFileCustom}"
										   CommandParameter="{Binding ElementName=Input, Path=Text}"/>
				</b:EventTrigger>
			</b:Interaction.Triggers>
		</TextBox>
	</StackPanel>
</Window>
